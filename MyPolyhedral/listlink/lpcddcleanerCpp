#!/usr/bin/perl -w

@LinesPrimal=();
@LinesDual=();
@LinesDualDir=();


$eAnswer="";

$InSch=0;
$InPri=0;
$InDua=0;
$InDuaDir=0;
$GetOptimal=0;
$GetPrimal=0;
$GetDual=0;
$GetDualDir=0;
$nbConstraint=-1;
$nbVariable=-1;
$optival=0;
while (<>)
{
    s/\n//;
    $line=$_;
    $WDS=0;
    @US1=split("constraints = ", $_);
    if (scalar(@US1) == 2)
    {
	if ($nbConstraint ne -1)
	{
	    print "Major error for number of constraints\n";
	    die;
	}
	$nbConstraint=$US1[1];
    }
    @US2=split("variables   = ", $_);
    if (scalar(@US2) == 2)
    {
	if ($nbVariable ne -1)
	{
	    print "Major error for number of variables\n";
	    die;
	}
	$nbVariable=$US2[1];
    }
    if ($line eq "begin" && $WDS eq 0)
    {
	$InSch=1;
	$WDS=1;
    }
    if ($line eq "end" && $WDS eq 0)
    {
	$InSch=0;
	$WDS=1;
    }
    if (($line eq "  primal_solution" || $line eq "  primal_direction") && $WDS eq 0 && $InSch eq 1)
    {
	$InPri=1;
	$GetPrimal=1;
	@U=split(" ", $line);
	$ChnPrimal=$U[0];
	$InDua=0;
	$InDuaDir=0;
	$WDS=1;
    }
    if ($line eq "  dual_solution" && $WDS eq 0 && $InSch eq 1)
    {
	$InPri=0;
	$InDua=1;
	$InDuaDir=0;
	$GetDual=1;
	$WDS=1;
    }
    if ($line eq "  dual_direction" && $WDS eq 0 && $InSch eq 1)
    {
	$InPri=0;
	$InDua=0;
	$InDuaDir=1;
	$GetDualDir=1;
	$WDS=1;
    }
    @S=split(" ", $line);
    if (scalar(@S)>0 && $S[0] eq "optimal_value" && $WDS eq 0  && $InSch eq 1)
    {
	$InPri=0;
	$InDua=0;
	$InDuaDir=0;
	$optival=$S[2];
	$GetOptimal=1;
	$WDS=1;
    }
    if ($InPri eq 1 && $WDS eq 0 && $InSch eq 1)
    {
	$LinesPrimal[scalar(@LinesPrimal)]=$line;
    }
    if ($InDua eq 1 && $WDS eq 0 && $InSch eq 1)
    {
	$LinesDual[scalar(@LinesDual)]=$line;
    }
    if ($InDuaDir eq 1 && $WDS eq 0 && $InSch eq 1)
    {
	$LinesDualDir[scalar(@LinesDualDir)]=$line;
    }
}

if ($nbConstraint eq -1 || $nbVariable eq -1)
{
    print "Error in nbConstraint and/or nbVariable\n";
    print "nbConstraint=".$nbConstraint."\n";
    print "nbVariable=".$nbVariable."\n";
    die;
}

@EntriesDual=();
for ($iCons=0; $iCons<$nbConstraint; $iCons++)
{
    $EntriesDual[$iCons]=0;
}
@EntriesPrimal=();
for ($iVar=0; $iVar<$nbVariable; $iVar++)
{
    $EntriesPrimal[$iVar]=0;
}

if ($GetPrimal eq 1)
{
    for ($iLine=1; $iLine<=scalar(@LinesPrimal); $iLine++)
    {
	@S=split(" ", $LinesPrimal[$iLine-1]);
	$EntriesPrimal[$S[0]-1]=$S[2];
    }
}
$HasDual=0;
if ($GetDual eq 1)
{
    $HasDual=1;
    for ($iLine=1; $iLine<=scalar(@LinesDual); $iLine++)
    {
	@S=split(" ", $LinesDual[$iLine-1]);
	$EntriesDual[$S[0]-1]=$S[2];
    }
}
if ($GetDualDir eq 1)
{
    $HasDual=1;
    for ($iLine=1; $iLine<=scalar(@LinesDualDir); $iLine++)
    {
	@S=split(" ", $LinesDualDir[$iLine-1]);
	$EntriesDual[$S[0]-1]=$S[2];
    }
}
$HasBothPrimalDual=0;
if ($HasDual eq 1 && $GetPrimal eq 1)
{
    $HasBothPrimalDual=1;
}
if ($HasBothPrimalDual ne $GetOptimal)
{
    print "ERROR. We should rethink\n";
    die;
}

#
# Determining answer nature
#
if ($GetOptimal eq 1)
{
    $eAnswer="dd_Optimal";
}
if ($HasDual eq 1 && $GetPrimal eq 0)
{
    $eAnswer="dd_Inconsistent";
}
if ($HasDual eq 0 && $GetPrimal eq 1)
{
    $eAnswer="dd_StructDualInconsistent";
    if ($ChnPrimal ne "primal_direction")
    {
	print "We have ChnPrimal=".$ChnPrimal."\n";
	die;
    }
}

#
# Printing final results
#
print $GetPrimal."\n";
print $HasDual."\n";
#
print $nbConstraint."\n";
for ($iCons=0; $iCons<$nbConstraint; $iCons++)
{
    print " ".$EntriesDual[$iCons];
}
print "\n";
#
print $optival."\n";
#
print $nbVariable."\n";
for ($iVar=0; $iVar<$nbVariable; $iVar++)
{
    print " ".$EntriesPrimal[$iVar];
}
print "\n";
#
$nbVarP1=$nbVariable+1;
print $nbVarP1."\n";
print " 1";
for ($iVar=0; $iVar<$nbVariable; $iVar++)
{
    print " ".$EntriesPrimal[$iVar];
}
print "\n";
#
print $eAnswer."\n";
