#!/usr/bin/perl -w
use strict;
use warnings;

my $uu=scalar(@ARGV);
if ($uu ne 1)
{
    print "Program is used as GLPSOL_ExtractXsol [FileIn]\n";
    die;
}

my $File=$ARGV[0];

open(INFILE, $File);
my @RESUL=<INFILE>;
close(INFILE);
my $nbLine=scalar(@RESUL);

$_=$RESUL[1];
s/\n//;
my $eLineRow=$_;
my @SplRow=split("ows:       ", $eLineRow);
my $nbRow=$SplRow[1];
my $nbIneq=$nbRow-1;

$_=$RESUL[2];
s/\n//;
my $strCol1=$_;
my @SplCol1=split("olumns:    ", $strCol1);
my $strCol2=$SplCol1[1];
my @SplCol2=split(" ", $strCol2);
my $nbCol=$SplCol2[0];
#print "nbRow=".$nbRow." nbCol=".$nbCol."\n";



my $FindUndefined=0;
for (my $iLine=0; $iLine<$nbLine; $iLine++)
{
    $_=$RESUL[$iLine];
    s/\n//;
    my $eLine=$_;
    my @U=split(" ", $eLine);
    if (scalar(@U) > 1)
    {
	if ($U[0] eq "Status:" && $U[1] eq "UNDEFINED")
	{
	    $FindUndefined=1;
	}
    }
}

if ($FindUndefined eq 1)
{
    print "return rec(Status:=\"Undefined\");\n";
}
else
{
    my $iLineColumn=-1;
    my $iLineRow=-1;
    my $TheObjective = "unset";
    for (my $iLine=0; $iLine<$nbLine; $iLine++)
    {
	my $eLine=$RESUL[$iLine];
	my @U=split("Column", $eLine);
	if (scalar(@U) > 1)
	{
	    $iLineColumn=$iLine;
	}
	my @Urow=split("Row name", $eLine);
	if (scalar(@Urow) > 1)
	{
	    $iLineRow=$iLine;
	}
	my @USL1=split("bjective", $eLine);
	if (scalar(@USL1) eq 2)
	{
	    my @USL2=split("obj = ", $USL1[1]);
	    my @USL3=split(" ", $USL2[1]);
	    $TheObjective=$USL3[0];
	}
    }
    my $INEQ_eps="[";
    my $INEQ_NL="[";
    for (my $iIneq=0; $iIneq<$nbIneq; $iIneq++)
    {
	my $iIneqP=$iIneq+1;
	my $eCol="c".$iIneqP;
	my $eLine=$RESUL[$iLineRow + 3 + $iIneq];
	my @V=split($eCol, $eLine);
	if (scalar(@V) ne 2)
	{
	    print "We have eCol=".$eCol."\n";
	    print "but eLine=".$eLine."\n";
	    print "Inconsistency\n";
	    die;
	}
	if ($iIneq > 0)
	{
	    $INEQ_eps=$INEQ_eps.", ";
	    $INEQ_NL=$INEQ_NL.", ";
	}
	my @V2=split(" ", $V[1]);
	my $epsVal=0;
	my $NLval=0;
	if ($V2[0] eq "NL")
	{
	    $NLval=1;
	}
	if ($V2[scalar(@V2)-1] eq "eps")
	{
	    $epsVal=1;
	}
	$INEQ_eps=$INEQ_eps.$epsVal;
	$INEQ_NL=$INEQ_NL.$NLval;
    }
    $INEQ_eps=$INEQ_eps."]";
    $INEQ_NL=$INEQ_NL."]";
    #
    my $Thr=0.001;
    my $COL_Ret="[";
    my $COL_NearZero="[";
    for (my $iVar=0; $iVar<$nbCol; $iVar++)
    {
	my $iVarP=$iVar+1;
	my $eVar="x".$iVarP;
	my $iLineRel=$iLineColumn + 2 + $iVar;
	if ($iLineRel >= $nbLine)
	{
	    print "Major mistake. Line index is too large\n";
	    die;
	}
	my $eLine=$RESUL[$iLineRel];
	my @U=split($eVar, $eLine);
	if (scalar(@U) ne 2)
	{
	    print "eVar=".$eVar."\n";
	    print "but eLine=".$eLine."\n";
	    print "not what we expect\n";
	    die;
	}
	if ($iVar > 0)
	{
	    $COL_Ret=$COL_Ret.", ";
	    $COL_NearZero=$COL_NearZero.", ";
	}
	my @U2=split(" ", $eLine);
	my $U2last=$U2[scalar(@U2)-1];
	my $eVal=$U2last;
	my $eValWrite;
	if ($eVal eq "eps")
	{
	    $eVal="0";
	    $eValWrite="0";
	}
	else
	{
	    my @VALS=split("e", $eVal);
	    if (scalar(@VALS) eq 2)
	    {
		my $eVal1=$VALS[0];
		my $eVal2=$VALS[1];
		my @VAL2S=split("", $eVal2);
		my $expo;
		my $strmult;
		if ($VAL2S[0] eq "-")
		{
		    $expo=-$eVal2;
		    $strmult="/";
		}
		else
		{
		    $expo=$eVal2;
		    $strmult="*";
		}
		my $themult="(";
		for (my $iter=0; $iter<$expo; $iter++)
		{
		    if ($iter>0)
		    {
			$themult=$themult."*";
		    }
		    $themult=$themult."10";
		}
		$themult=$themult.")";
		$eValWrite=$eVal1.$strmult.$themult;
	    }
	    else
	    {
		$eValWrite=$eVal;
	    }
	}
	my $eNZ;
	if (abs($eVal) > $Thr)
	{
	    $eNZ=0;
	}
	else
	{
	    $eNZ=1;
	}
	$COL_Ret=$COL_Ret.$eValWrite;
	$COL_NearZero=$COL_NearZero.$eNZ;
    }
    $COL_Ret=$COL_Ret."]";
    $COL_NearZero=$COL_NearZero."]";
    print "return rec(Status:=\"Defined\"";
    print ",\n eVect:=".$COL_Ret;
    if ($TheObjective ne "unset")
    {
	print ",\n Objective:=".$TheObjective;
    }
    print ",\n INEQ_eps:=".$INEQ_eps;
    print ",\n INEQ_NL:=".$INEQ_NL;
    print ",\n NearZero:=".$COL_NearZero.");\n";
}
